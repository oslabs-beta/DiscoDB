{"version":3,"file":"bundle.esm.js","sources":["../../discoFunctions/configMap.js","../../discoFunctions/discoGlobals.js","../../discoFunctions/idbOperations.js","../../discoFunctions/backgroundSync.js","../../discoFunctions/discoSync.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n// import * as fs from 'fs';\n// import path from 'path';\n\n// import { dbGlobals } from './discodb.config.js'\n\nfunction find(targetPath) {\n  return findStartingWith(path.dirname(require.main.filename), targetPath);\n}\n\nfunction findStartingWith(start, target) {\n  const file = path.join(start, target);\n  try {\n    data = fs.readFileSync(file, 'utf-8');\n    return JSON.parse(data);\n  } catch (err) {\n    if (path.dirname(start) !== start) {\n      return findStartingWith(path.dirname(start), target);\n    }\n  }\n}\n\n// const dbGlobals = JSON.parse(userConfig);\n// console.log(dbGlobals)\n\nconst dbGlobals = find('discodb.config.json');\nconsole.log(dbGlobals)\n\n// module.exports = dbGlobals;\nexport default dbGlobals;","// import { dbGlobals } from '../../../discodb.config.js'\nimport dbGlobals from './configMap'\n\nconst idbPromise = {\n  DB: null\n}\n\nconst onlineUrlArr = [];\ndbGlobals.onlineRoutes.forEach(el => {\n  onlineUrlArr.push(el.url)\n});\n\nconst offlineUrlArr = [];\ndbGlobals.offlineRoutes.forEach(el => {\n  offlineUrlArr.push(el.url);\n});\n\nexport { dbGlobals, idbPromise, onlineUrlArr, offlineUrlArr }","import { idbPromise, dbGlobals } from './discoGlobals.js';\n\n/**\n * @property {Function} discoConnect Establishes connection to indexedDB & create Object Stores as specified in Configuration.\n * @param {Function} callback \n *\n */\nfunction discoConnect(callback) {\n  return new Promise((resolve, reject) => {\n    let req = indexedDB.open(dbGlobals.databaseName, dbGlobals.version)\n    req.onerror = (err) => {\n      //could not open db\n      console.log('Error: ', err);\n      idbPromise.DB = null;\n      reject(err);\n    };\n    req.onupgradeneeded = (event) => {\n      let db = event.target.result;\n      // Database Version Upgraded\n      if (!db.objectStoreNames.contains(dbGlobals.storeName)) {\n        db.createObjectStore(dbGlobals.storeName, {\n          keyPath: dbGlobals.keypath,\n        });\n      }\n      if (!db.objectStoreNames.contains(dbGlobals.syncQueue)) {\n        //Creating Object Store for Sync Queue\n        db.createObjectStore(dbGlobals.syncQueue, {\n          keyPath: 'id', autoIncrement: true,\n        })\n      }\n    };\n    req.onsuccess = (event) => {\n      idbPromise.DB = event.target.result;\n      //Database connected\n      if (callback) {\n        callback();\n      }\n      resolve(idbPromise.DB);\n      };\n  })\n};\n\n/**\n * @property {Function} discoAdd Adds an object in to the configured Object Store.\n * @param {Object} dataObject Object data to be stored.\n *\n */\nfunction discoAdd(dataObject) {\n   return new Promise ( (resolve, reject) => {\n    if (dataObject && idbPromise.DB) {\n      let tx = idbPromise.DB.transaction(dbGlobals.storeName, 'readwrite');\n\n      tx.onerror = (err) => {\n        console.log('Error:', err);\n        reject(err);\n      };\n      tx.oncomplete = (event) => {\n        //Data added successfully\n      };\n      \n      let store = tx.objectStore(dbGlobals.storeName);\n      let req = store.put(dataObject);\n\n      req.onsuccess = (event) => {\n        const result = event.target.result;\n        resolve(result);\n      };\n    } else {\n      console.log('DB is not connected');\n    }\n  })\n};\n\n/**\n * @property {Function} discoDeleteAll Deletes all properties of the configured Object Store.\n *\n */\nfunction discoDeleteAll() {\n  return new Promise( (resolve, reject) => {\n    if (idbPromise.DB) {\n      let tx = idbPromise.DB.transaction(dbGlobals.storeName, 'readwrite');\n      tx.onerror = (err) => {\n        console.log('Error:', err);\n        reject(err);\n      };\n      tx.oncomplete = (event) => {\n        // data deleted successfully \n      };\n      let store = tx.objectStore(dbGlobals.storeName);\n      const req = store.clear();\n      req.onsuccess = (event) => {\n        const result = event.target.result;\n        resolve(result);\n      };\n    } else {\n      console.log('DB is not connected');\n    }\n  })\n};\n\n/**\n * @property {Function} discoGetAll Gets all properties saved on the configured Object Store.\n * @return {Array} array of objects containing all properties in the Object Store.\n */\nfunction discoGetAll() {\n  return new Promise((resolve, reject) => {\n    if (idbPromise.DB) {\n      let tx = idbPromise.DB.transaction(dbGlobals.storeName, 'readonly');\n      tx.onerror = (err) => {\n        console.log('Error: ', err);\n        reject(err);\n      };\n      tx.oncomplete = (event) => {\n        //Transaction successful, all objects retrieved.\n      };\n      let store = tx.objectStore(dbGlobals.storeName);\n      const req = store.getAll();\n      req.onsuccess = (event) => {\n        const result = event.target.result;\n        resolve(result);\n      };\n    } else {\n      console.log('DB is not connected');\n    }\n  })\n}\n\n/**\n * @property {Function} discoDeleteOne Deletes one property on the configured Object Store.\n * @param {String} id The id of the object on the configured Object Store  * \n */\nfunction discoDeleteOne(id) {\n  return new Promise( (resolve, reject) => {\n    if (idbPromise.DB) {\n      let tx = idbPromise.DB.transaction(dbGlobals.storeName, 'readwrite');\n      tx.onerror = (err) => {\n        console.log('Error: ', err);\n        reject(err);\n      };\n      tx.oncomplete = (event) => {\n        //Transaction successful\n      };\n      let store = tx.objectStore(dbGlobals.storeName);\n      const req = store.delete(id);\n      req.onsuccess = (event) => {\n        const result = event.target.result;\n        resolve(result);\n      };\n    } else {\n      console.log('DB is not connected');\n    }\n  })\n}\n\n/**\n * @property {Function} discoUpdateOne Updates one property on the configured Object Store.\n * @param {Object} dataObject The req body object on the configured Object Store  \n * \n */\nfunction discoUpdateOne(dataObject) {\n  return new Promise ( (resolve, reject) => {\n    if (idbPromise.DB) {\n      let tx = idbPromise.DB.transaction(dbGlobals.storeName, 'readwrite');\n      tx.onerror = (err) => {\n        console.log('Error: ', err);\n        reject(err);\n      };\n      tx.oncomplete = (event) => {\n        //Transaction successful\n      };\n      let store = tx.objectStore(dbGlobals.storeName);\n      const req = store.put(dataObject);\n      req.onsuccess = (event) => {\n        const result = event.target.result;\n        resolve(result);\n      };\n    } else {\n      console.log('DB is not connected');\n    }\n  })\n};\n\nexport { discoConnect, discoAdd, discoDeleteAll, discoGetAll, discoDeleteOne, discoUpdateOne }; \n","import { idbPromise, dbGlobals } from './discoGlobals';\n\n/**\n * @property {Function} accessObjectStore Access object store in IDB database and start a transaction\n * @param {String} storeName Object store to be accessed for transaction  \n * @param {String} method  Method for transaction, \"readwrite, readonly\"\n * @return {Object} Accessed Object store Object \n */\nfunction accessObjectStore (storeName, method) {\n  return idbPromise.DB.transaction([storeName], method).objectStore(storeName)\n};\n/**\n * @property {Function} discoAddToQueue Adds Object into Object store\n * @param {Object} dataObject Objected to be added to Object store\n *  \n */\nfunction discoAddToQueue (dataObject) { \n  //Open a transaction to object store 'Queue' \n  const store = accessObjectStore(dbGlobals.syncQueue, 'readwrite')\n  //Add data to object store\n  store.add(dataObject)\n};\n/**\n * @property {Function} discoRegisterSync Request a \"Sync\" event to reattempt request when network is online.\n * \n */\nasync function discoRegisterSync() {\n  try {\n    const register = await registration.sync.register('discoSync');\n    return register;\n  } catch(error) {\n    console.log('Error:' , error);\n    return error;\n  }\n};\n\n/**\n * @property {Function} discoSyncToServer Accesses the Queue Object Store and re-sends all requests saved in application/json.\n * \n */\nfunction discoSyncToServer() {\n  const store = accessObjectStore(dbGlobals.syncQueue, 'readwrite');\n  const request = store.getAll();\n\n  request.onsuccess = function (event) {\n    const httpQueue = event.target.result;\n    //Comes back as an array of objects \n    //Iterate Queue store and initialize Fetch request\n    httpQueue.forEach((data) => {\n      const { url, method, body } = data\n      const headers = {'Content-Type': 'application/json'};\n      fetch(url, {\n        method: method,\n        headers: headers,\n        body: JSON.stringify(body)\n      })\n      .then((res) => res.json())\n      .then((res) => {\n        //Previous transaction was closed due to getAll()\n        //Reopen object store and delete the corresponding object on successful HTTP request\n        const newStore = accessObjectStore(dbGlobals.syncQueue, 'readwrite');\n        newStore.delete(data.id);\n      })\n      .catch((error) => {\n        console.error('Failed to sync data to server:', error);\n        throw error\n      })\n    });\n  }\n  request.onerror = (err) => {\n    console.log('Attempt to sync queue failed:', err);\n  }\n};\n\nexport { discoAddToQueue, discoRegisterSync, discoSyncToServer }; \n","import { discoConnect, discoGetAll, discoDeleteOne, discoUpdateOne, discoAdd, discoDeleteAll } from './idbOperations.js';\nimport { discoAddToQueue, discoRegisterSync } from './backgroundSync.js';\nimport { idbPromise , dbGlobals } from './discoGlobals.js';\n\n/**\n * @property {Function} discoSyncOffline Executes different IndexedDB logic based on the value of passed in method\n * @param {String} method This is the method property of the intercepted fetch request\n * @param {String} url This is the url property of the intercepted fetch request\n * @param {String} store This is the store property associated with the url provided in the config file\n * @param {Request} eventRequest This is the cloned version of the intercepted fetch request\n *\n */\nfunction discoSyncOffline(method, url, clonedRequest) {\n  switch(method) {\n    case 'GET':\n      if (idbPromise.DB) {\n        return discoGetAll().then((data) => {\n          const responseBody = { data };\n          const IDBData = new Response(JSON.stringify(responseBody));\n          return IDBData;\n        })\n      } else {\n        return discoConnect(() => {\n          discoGetAll().then((data) => {\n            const responseBody = {data: data};\n            const IDBData = new Response(JSON.stringify(responseBody));\n            return IDBData;\n          });\n        })\n      }\n    case 'DELETE':\n      return clonedRequest.json()\n      .then((data) => {\n        const reqBody = {\n          url: url,\n          method: method,\n          body: data\n        };\n        discoRegisterSync();\n        discoAddToQueue(reqBody);\n        const keypath = dbGlobals.keypath;\n        const id = data[keypath];\n        discoDeleteOne(id);\n        const deleteResponse = new Response(JSON.stringify({}));\n        return deleteResponse;\n      })\n      .catch( err => {\n        console.log('Error in DELETE block: ', err);\n      })\n    case 'PATCH':\n      return clonedRequest.json()\n      .then((data) => {\n        const reqBody = {\n          url: url,\n          method: method,\n          body: data\n        };\n        discoRegisterSync();\n        discoAddToQueue(reqBody);\n        const keypath = dbGlobals.keypath;\n        const id = data[keypath];\n        discoUpdateOne(data);\n        // returns empty object to trigger rerender in our app \n        const patchResponse = new Response(JSON.stringify({}));\n        return patchResponse;\n      }) \n    default:\n      return caches.match(clonedRequest)\n        .then(response => {\n          return response\n        })\n  }\n}\n\n/**\n * @property {Function} discoSyncOnline Establishes connection to indexedDB & create Object Stores as specified in Configuration.\n * @param {String} method This is the method property of the intercepted fetch request\n * @param {String} url This is the url property of the intercepted fetch request\n * @param {String} store This is the store property associated with the url provided in the config file\n * @param {Request} clonedResponse This is the cloned version of the intercepted fetch response\n *\n */\nfunction discoSyncOnline(method, url, clonedResponse) {\n  switch(method) {\n    case 'GET':\n      const resCloneDB = clonedResponse;\n      resCloneDB.json().then(data => {\n        if (idbPromise.DB) {\n          discoDeleteAll();\n        } else {\n          discoConnect( () => {\n            discoDeleteAll();\n          })\n        }\n        //populate indexedDB here\n        data.data.forEach( note => {\n          if (idbPromise.DB) {\n            discoAdd(note);\n          } else {\n            discoConnect(() => {\n              discoAdd(note);\n            })\n          }\n        })\n      });\n      break;\n    default:\n      break;\n  }\n}\n\nexport { discoSyncOffline, discoSyncOnline };"],"names":[],"mappings":"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"}